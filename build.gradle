buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'maven'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

group= "chanceCubes.CCubesCore"
archivesBaseName = "ChanceCubes"
version = "${mc_version}-${mod_version}.${buildnumber}"

minecraft {
    version = "${mc_version}-${forge_version}"
	
	replace "@VERSION@", project.version
    replaceIn "CCubesCore.java"
    replaceIn "mcmod.info"
}

configurations {
    shade
    compile.extendsFrom shade
	deployerJars 
}

repositories {
	mavenCentral()
	
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff 
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
	
	maven {
        name 'Chisel Repo'
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    shade "team.chisel.ctmlib:CTMLib:${ctmlib_version}"
	compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev"
	deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
	
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**', '*.info'
        }
    }
}

task deobfJar(type: Jar) {
        from sourceSets.main.output
        appendix = 'deobf'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

build.dependsOn sourceJar, deobfJar
 
artifacts {
	archives jar
    archives deobfJar
	archives sourceJar
}
